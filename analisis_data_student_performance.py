# -*- coding: utf-8 -*-
"""ANALISIS DATA STUDENT PERFORMANCE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SsD-cMCt-NXLE45-TqxrAu6WCLXwvSPA

*   Mata Kuliah	: Data Science
*   Kelas	: IF405
*   Prodi	: Informatika PJJ S1
*   Nama Mahasiswa	: Aryo Tegar Pradigdo
*   NIM	: 230401070201

REGRESI LINEAR
"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

# Gunakan fitur G1 dan G2 untuk prediksi G3
X = df[["G1", "G2"]]   # df adalah dataframe student-mat.csv
y = df["G3"]

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Buat model regresi dan latih
model = LinearRegression()
model.fit(X_train, y_train)

# Visualisasi regresi 3D
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Scatter data aktual
ax.scatter(X_test["G1"], X_test["G2"], y_test, color='blue', label='Data Aktual')

# Buat permukaan prediksi
g1_range = np.linspace(X_test["G1"].min(), X_test["G1"].max(), 10)
g2_range = np.linspace(X_test["G2"].min(), X_test["G2"].max(), 10)
g1_grid, g2_grid = np.meshgrid(g1_range, g2_range)
grid_input = np.c_[g1_grid.ravel(), g2_grid.ravel()]
g3_pred_surface = model.predict(grid_input).reshape(g1_grid.shape)

# Permukaan regresi
ax.plot_surface(g1_grid, g2_grid, g3_pred_surface, color='red', alpha=0.5)

# Label sumbu
ax.set_xlabel("G1 (Nilai Periode 1)")
ax.set_ylabel("G2 (Nilai Periode 2)")
ax.set_zlabel("G3 (Nilai Akhir)")
ax.set_title("Visualisasi Regresi Linear: Prediksi G3 berdasarkan G1 dan G2")

plt.show()

"""CLUSTERING SEGMENTASI SISWA"""

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Baca dataset
df = pd.read_csv("student-mat.csv", sep=";")

# Pilih fitur yang relevan
features = df[["absences", "studytime"]]

# Standarisasi data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=42, n_init="auto")
df["cluster"] = kmeans.fit_predict(scaled_features)

# Ringkasan per cluster
print(df.groupby("cluster")[["absences", "studytime"]].mean())

# Visualisasi klaster
plt.figure(figsize=(8, 6))
plt.scatter(df["absences"], df["studytime"], c=df["cluster"], cmap="viridis", s=50)
plt.xlabel("Jumlah Absensi")
plt.ylabel("Waktu Belajar (1â€“4)")
plt.title("Segmentasi Siswa berdasarkan Absensi dan Waktu Belajar")
plt.colorbar(label="Cluster")
plt.grid(True)
plt.show()

"""KLASIFIKASI VARIABEL STUDYTIME, FAILURES, DAN ABSENCES"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Load data
df = pd.read_csv("student-mat.csv", sep=";")

# Buat label target: Lulus = 1, Tidak Lulus = 0
df["pass"] = df["G3"].apply(lambda x: 1 if x >= 10 else 0)

# Fitur yang digunakan
features = df[["studytime", "failures", "absences"]]
target = df["pass"]

# Split data latih dan uji
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Model klasifikasi
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Evaluasi model
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Visualisasi hasil prediksi (label aktual vs prediksi model)
plt.figure(figsize=(8, 6))
plt.scatter(X_test["studytime"], X_test["failures"], c=y_pred, cmap='coolwarm', edgecolor='k', s=100)
plt.xlabel("Study Time")
plt.ylabel("Failures")
plt.title("Prediksi Klasifikasi: Lulus (1) vs Tidak Lulus (0)")
plt.colorbar(label="Prediksi")
plt.grid(True)
plt.show()